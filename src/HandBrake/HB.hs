module HandBrake.HB
  ( main )
where

-- base --------------------------------

import Control.Monad       ( MonadFail, filterM, forM, forM_, return, when )
import Data.Eq             ( Eq )
import Data.Function       ( ($), (&) )
import Data.List           ( nub, tails )
import Data.List.NonEmpty  ( NonEmpty, toList )
import Data.Maybe          ( maybe )
import Data.Ord            ( (>) )
import Data.Tuple          ( snd )
import Data.Word           ( Word8 )
import GHC.Stack           ( HasCallStack )
import System.IO           ( IO )
import Text.Show           ( show )

-- base-unicode-symbols ----------------

import Data.Bool.Unicode      ( (‚à®) )
import Data.Eq.Unicode        ( (‚â°), (‚â¢) )
import Data.Function.Unicode  ( (‚àò) )

-- containers-plus ---------------------

import ContainersPlus.Member  ( (‚àà) )

-- data-textual ------------------------

import Data.Textual  ( Printable, toText )

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir )
import FPath.AbsFile           ( AbsFile )
import FPath.Error.FPathError  ( AsFPathError, FPathIOError )
import FPath.File              ( File )

-- lens --------------------------------

import Control.Lens.Tuple  ( _2 )

-- log-plus ----------------------------

import Log  ( Log, warn )

-- logging-effect ----------------------

import Control.Monad.Log  ( LoggingT, MonadLog )

-- mockio ------------------------------

import MockIO  ( DoMock( DoMock, NoMock ) )

-- mockio-log --------------------------

import MockIO.IOClass      ( IOClass( NoIO ) )
import MockIO.Log          ( errIO' )
import MockIO.MockIOClass  ( MockIOClass( MockIOClass ) )

-- mockio-plus -------------------------

import MockIO.Process            ( (!) )
import MockIO.Process.MLCmdSpec  ( mkMLCmdW' )

-- monaderror-io -----------------------

import MonadError.IO        ( ”ù )
import MonadError.IO.Error  ( AsIOError )

-- monadio-plus ------------------------

import MonadIO                        ( MonadIO )
import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )
import MonadIO.File                   ( devnull )
import MonadIO.FPath                  ( getCwd, pResolve )
import MonadIO.FStat                  ( FExists( FExists, NoFExists ), fexists )
import MonadIO.Process.CmdSpec        ( cwd )
import MonadIO.Process.ExitStatus     ( ExitStatus( ExitVal ) )

-- more-unicode ------------------------

import Data.MoreUnicode.Bool     ( ùîπ )
import Data.MoreUnicode.Functor  ( (‚ä≥), (‚©∫) )
import Data.MoreUnicode.Lens     ( (‚ä£), (‚ä¢) )
import Data.MoreUnicode.Maybe    ( ùïÑ, pattern ùïµ )
import Data.MoreUnicode.Monad    ( (‚â´) )
import Data.MoreUnicode.Text     ( ùïã )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, MonadError )

-- natural -----------------------------

import Natural  ( ‚Ñï, One, count, length )

-- stdmain -----------------------------

import StdMain             ( stdMain'' )
import StdMain.StdOptions  ( DryRunLevel )
import StdMain.UsageError  ( AsUsageError, UsageFPProcIOError, throwUsage )

-- text --------------------------------

import Data.Text  ( pack )

-- tfmt --------------------------------

import Text.Fmt  ( fmtT )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified HandBrake.Paths  as  Paths

import HandBrake.Encode   ( EncodeDetails, details, encodeRequest1, encodeArgs )
import HandBrake.Options  ( Options( Encode, Scan ), Overwrite( Overwrite )
                          , parseOptions )

--------------------------------------------------------------------------------

scan ‚à∑ ‚àÄ Œµ Œº .
       (MonadIO Œº, MonadError Œµ Œº, Printable Œµ,
        AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ,
        MonadLog (Log MockIOClass) Œº) ‚áí
       File ‚Üí AbsDir ‚Üí ùïÑ ‚Ñï ‚Üí DoMock ‚Üí Œº ()
scan file wd stream_id do_mock = do
  let args = [ "--scan"
             , "--input", toText file
             , "--title", maybe "0" (pack ‚àò show) stream_id
             ]
      cmd  = mkMLCmdW' Paths.handbrakeCLI args do_mock & cwd ‚ä¢ ùïµ wd
  snd ‚ä≥ (devnull ‚â´ \null ‚Üí null ! cmd)

----------------------------------------

encArgs ‚à∑ ‚àÄ Œµ Œº .
       (MonadIO Œº,
        AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
        AsProcExitError Œµ,
        MonadError Œµ Œº, Printable Œµ,
        MonadLog (Log MockIOClass) Œº) ‚áí
       AbsFile ‚Üí AbsDir ‚Üí ‚Ñï ‚Üí ùïã ‚Üí EncodeDetails ‚Üí DoMock ‚Üí Œº ([ùïã], AbsFile)

encArgs file output_dir stream_id name ds do_mock = do
  fexists output_dir ‚â´ \ x ‚Üí when (x ‚â° NoFExists) $
    let msg = [fmtT|No such output dir: %T|] output_dir
     in case do_mock of
          DoMock ‚Üí warn (MockIOClass NoIO NoMock) msg
          NoMock ‚Üí throwUsage msg
  let req = encodeRequest1 file output_dir stream_id (ùïµ name) & details ‚ä¢ ds
  encodeArgs req

----------------------------------------

{- | Execute an encode with given args, with stdin connected to devnull; return
     0 in case of success (throw an exception otherwise). -}
do_encode ‚à∑ ‚àÄ Œµ Œº .
            (MonadIO Œº, MonadFail Œº,
             AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
             AsProcExitError Œµ,
             MonadError Œµ Œº, Printable Œµ,
             MonadLog (Log MockIOClass) Œº) ‚áí
            [ùïã] ‚Üí DoMock ‚Üí Œº ()
do_encode args do_mock = do
  let cmd  = mkMLCmdW' Paths.handbrakeCLI args do_mock
  (ExitVal 0,()) ‚Üê devnull ‚â´ \ null ‚Üí null ! cmd
  return ()

----------------------------------------

{- | Very cheap duplicate detector.  Each element e in the input list will be
     cited (n-1) times in the output, where n is the number of occurences of e
     in the input list.
 -}
duplicates ‚à∑ Eq Œ± ‚áí [Œ±] ‚Üí [Œ±]
duplicates xs = [ y | x ‚Üê tails xs, length x > 1, let (y:ys) = x, y ‚àà ys]

{- | Check that a list of files contains no duplicates, and no extant files.
     The `overwrite` argument, if true, skips the extant files check.
     Errors will be logged (at `Error` level); and an exception will be thrown
     unless `do_mock` is `DoMock`.
-}
checkOutputFiles ‚à∑ (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                    AsIOError Œµ, AsUsageError Œµ, MonadError Œµ Œº) ‚áí
                   [AbsFile] ‚Üí ùîπ ‚Üí DoMock ‚Üí Œº ()
checkOutputFiles fns overwrite do_mock = do
  let dups = duplicates fns
  extants ‚Üê if overwrite
            then return []
            else filterM ((‚â° FExists) ‚©∫ fexists) (nub fns)

  when (dups ‚â¢ [] ‚à® extants ‚â¢ []) $ do
    forM_ dups (\ d ‚Üí errIO' $ [fmtT|duplicate output: %T|] d)
    forM_ extants (\ e ‚Üí errIO' $ [fmtT|output file already exists: %T|] e)
    when (do_mock ‚â° NoMock) $
      throwUsage @ùïã "duplicate or extant output files found"

----------------------------------------

{- | Encode multiple titles from a single input file. -}
encodes ‚à∑ ‚àÄ Œµ Œº .
          (MonadIO Œº, MonadFail Œº, Printable Œµ, MonadError Œµ Œº,
           AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
           AsProcExitError Œµ,
           MonadLog (Log MockIOClass) Œº) ‚áí
          AbsFile ‚Üí AbsDir ‚Üí NonEmpty (‚Ñï,ùïã) ‚Üí EncodeDetails ‚Üí Overwrite ‚Üí DoMock
        ‚Üí Œº ()
encodes input output_dir ts ds ov do_mock = do
  let enc_args (stream_id,name) =
        encArgs input output_dir stream_id name ds do_mock
  encFnArgs ‚à∑ NonEmpty ([ùïã],AbsFile) ‚Üê forM ts enc_args
  checkOutputFiles (toList $ (‚ä£ _2) ‚ä≥ encFnArgs) (Overwrite ‚â° ov) do_mock
  forM_ (toList encFnArgs) (\ (args,_) ‚Üí do_encode args do_mock )

----------------------------------------

myMain ‚à∑ ‚àÄ Œµ .
         (HasCallStack, Printable Œµ, AsUsageError Œµ,
          AsIOError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ, AsFPathError Œµ) ‚áí
         AbsDir ‚Üí DryRunLevel One ‚Üí Options
       ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain wd dry_run opts = do
  let do_mock = if 0 ‚â¢ count dry_run then DoMock else NoMock
  case opts of
    Scan   f n          ‚Üí scan f wd n do_mock
    Encode f ts ds d ov ‚Üí do output_dir ‚Üê pResolve d
                             f'         ‚Üê pResolve f
                             encodes f' output_dir ts ds ov do_mock
  return 0

----------------------------------------

main ‚à∑ IO ()
main = do
  let progDesc = "HandBrakeCLI wrapper"
  wd ‚Üê ”ù (getCwd @FPathIOError)
  stdMain'' progDesc (parseOptions wd) (myMain @UsageFPProcIOError wd)

-- that's all, folks! ----------------------------------------------------------
