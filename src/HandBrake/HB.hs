module HandBrake.HB
  ( main )
where

-- base --------------------------------

import Control.Monad       ( forM, return )
import Data.Function       ( (&) )
import Data.List.NonEmpty  ( NonEmpty, toList, unzip )
import Data.Maybe          ( maybe )
import Data.Word           ( Word8 )
import GHC.Stack           ( HasCallStack )
import System.IO           ( IO )
import Text.Show           ( show )

-- base-unicode-symbols ----------------

import Data.Function.Unicode  ( (‚àò) )

-- data-textual ------------------------

import Data.Textual  ( Printable, toText )

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir )
import FPath.AbsFile           ( AbsFile )
import FPath.Error.FPathError  ( AsFPathError, FPathIOError )
import FPath.File              ( File )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( LoggingT )

-- mockio ------------------------------

import MockIO  ( DoMock )

-- mockio-log --------------------------

import MockIO.MockIOClass  ( MockIOClass )

-- mockio-plus -------------------------

import MockIO.Process.MLCmdSpec  ( MLCmdSpec, mkMLCmdW' )

-- monaderror-io -----------------------

import MonadError.IO        ( ”ù )
import MonadError.IO.Error  ( AsIOError )

-- monadio-plus ------------------------

import MonadIO.Base                   ( getArgs )
import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )
import MonadIO.FPath                  ( getCwd, pResolve )
import MonadIO.Process.CmdSpec        ( cwd )

-- more-unicode ------------------------

import Data.MoreUnicode.Functor  ( (‚ä≥) )
import Data.MoreUnicode.Lens     ( (‚ä¢) )
import Data.MoreUnicode.Maybe    ( ùïÑ, pattern ùïµ )
import Data.MoreUnicode.Monad    ( (‚â´) )
import Data.MoreUnicode.Text     ( ùïã )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, MonadError )

-- natural -----------------------------

import Natural  ( ‚Ñï )

-- stdmain -----------------------------

import StdMain             ( Overwrite( NoOverwrite )
                           , checkRunNICmds', stdMain )
import StdMain.UsageError  ( AsUsageError, UsageFPProcIOError )

-- text --------------------------------

import Data.Text  ( pack )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified HandBrake.Paths  as  Paths

import HandBrake.Encode   ( EncodeDetails, EncodeRequest
                          , details, encodeRequest1, encodeArgs )
import HandBrake.Options  ( Options( Encode, Scan )
                          , parseOptions )

--------------------------------------------------------------------------------

scan ‚à∑ File ‚Üí AbsDir ‚Üí ùïÑ ‚Ñï ‚Üí DoMock ‚Üí MLCmdSpec()
scan file wd stream_id do_mock =
  let args = [ "--scan"
             , "--input", toText file
             , "--title", maybe "0" (pack ‚àò show) stream_id
             ]
   in mkMLCmdW' Paths.handbrakeCLI args do_mock & cwd ‚ä¢ ùïµ wd

----------------------------------------

encArgs ‚à∑ ‚àÄ Œµ Œ∑ . (AsUsageError Œµ, AsFPathError Œµ, MonadError Œµ Œ∑) ‚áí
           AbsFile ‚Üí AbsDir ‚Üí ‚Ñï ‚Üí ùïã ‚Üí EncodeDetails
         ‚Üí Œ∑ (DoMock ‚Üí MLCmdSpec (),AbsFile)

encArgs file output_dir stream_id name ds = do
  let req ‚à∑ EncodeRequest
      req = encodeRequest1 file output_dir stream_id (ùïµ name) & details ‚ä¢ ds
  (args, outputf) ‚Üê encodeArgs req
  return (mkMLCmdW' Paths.handbrakeCLI args, outputf)

----------------------------------------

{- | Encode multiple titles from a single input file. -}
encodes ‚à∑ ‚àÄ Œµ Œº . (MonadError Œµ Œº, AsUsageError Œµ, AsFPathError Œµ) ‚áí
          AbsFile ‚Üí AbsDir ‚Üí NonEmpty (‚Ñï,ùïã) ‚Üí EncodeDetails
        ‚Üí Œº ([DoMock ‚Üí MLCmdSpec ()], [AbsFile], [AbsDir])
encodes input output_dir ts ds = do
  let enc_args ‚à∑ (‚Ñï,ùïã) ‚Üí Œº (DoMock ‚Üí MLCmdSpec (), AbsFile)
      enc_args (stream_id,name) = do
        (mkCmd,outputf) ‚Üê encArgs input output_dir stream_id name ds
        return (mkCmd,outputf)

  (cmds,fns) ‚à∑ (NonEmpty (DoMock ‚Üí MLCmdSpec ()), NonEmpty AbsFile)
             ‚Üê unzip ‚ä≥ forM ts enc_args
  return ((toList cmds),(toList fns),[output_dir])

----------------------------------------

myMain ‚à∑ ‚àÄ Œµ .
         (HasCallStack, Printable Œµ, AsUsageError Œµ,
          AsIOError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ, AsFPathError Œµ) ‚áí
         AbsDir ‚Üí DoMock ‚Üí Options
       ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain wd do_mock opts = do
  (overwrite,cmds,fns,dirs) ‚Üê case opts of
    Scan   f n          ‚Üí let cmd = scan f wd n
                           in return (NoOverwrite,[cmd],[],[])
    Encode f ts ds d ov ‚Üí do output_dir ‚Üê pResolve d
                             f'         ‚Üê pResolve f
                             (cmds,fns,dirs) ‚Üê encodes f' output_dir ts ds
                             return (ov,cmds,fns,dirs)
  checkRunNICmds' overwrite cmds fns dirs do_mock
  return 0

----------------------------------------

main ‚à∑ IO ()
main = do
  let progDesc = "HandBrakeCLI wrapper"
  wd ‚Üê ”ù (getCwd @FPathIOError)
  getArgs ‚â´ stdMain progDesc (parseOptions wd) (myMain @UsageFPProcIOError wd)

-- that's all, folks! ----------------------------------------------------------
