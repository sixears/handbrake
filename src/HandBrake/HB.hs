module HandBrake.HB
  ( main )
where

-- base --------------------------------

import Control.Applicative  ( pure )
import Control.Monad        ( return )
import Data.Function        ( (&) )
import Data.Maybe           ( maybe )
import Data.Word            ( Word8 )
import GHC.Stack            ( HasCallStack )
import System.IO            ( IO )
import Text.Show            ( show )

-- base-unicode-symbols ----------------

import Data.Eq.Unicode        ( (‚â¢) )
import Data.Function.Unicode  ( (‚àò) )

-- data-textual ------------------------

import Data.Textual  ( Printable, toText )

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir )
import FPath.Error.FPathError  ( AsFPathError )
import FPath.File              ( File )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( LoggingT, MonadLog )

-- mockio ------------------------------

import MockIO  ( DoMock( DoMock, NoMock ) )

-- mockio-log --------------------------

import MockIO.Log  ( MockIOClass )

-- mockio-plus -------------------------

import MockIO.Process            ( (!) )
import MockIO.Process.MLCmdSpec  ( mkMLCmdW' )

-- monaderror-io -----------------------

import MonadError.IO.Error  ( AsIOError )

-- monadio-plus ------------------------

import MonadIO                        ( MonadIO )
import MonadIO.Error.CreateProcError  ( AsCreateProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError )
import MonadIO.File                   ( devnull )
import MonadIO.FPath                  ( getCwd )
import MonadIO.Process.CmdSpec        ( cwd )

-- more-unicode ------------------------

import Data.MoreUnicode.Lens   ( (‚ä©) )
import Data.MoreUnicode.Maybe  ( ùïÑ, pattern ùïπ )
import Data.MoreUnicode.Monad  ( (‚â´) )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, MonadError )

-- natural -----------------------------

import Natural  ( ‚Ñï, One, count )

-- stdmain -----------------------------

import StdMain             ( stdMain'' )
import StdMain.StdOptions  ( DryRunLevel )
import StdMain.UsageError  ( AsUsageError, UsageFPProcIOError )

-- text --------------------------------

import Data.Text  ( pack )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import qualified HandBrake.Paths  as  Paths

import HandBrake.Encode   ( encodeRequest, encodeArgs )
import HandBrake.Options  ( Options( Encode, Scan ), parseOptions )

--------------------------------------------------------------------------------

scan ‚à∑ ‚àÄ Œµ Œº .
       (MonadIO Œº, MonadError Œµ Œº, Printable Œµ,
        AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ, AsProcExitError Œµ,
        MonadLog (Log MockIOClass) Œº) ‚áí
       File ‚Üí ùïÑ ‚Ñï ‚Üí DoMock ‚Üí Œº Word8
scan f n do_mock = do
  let args = [ "--scan"
             , "--input", toText f
             , "--title", maybe "0" (pack ‚àò show) n
             ]
      cmd  = mkMLCmdW' Paths.handbrakeCLI args do_mock
  (_,()) ‚Üê devnull ‚â´ \null ‚Üí null ! cmd
  return 0

----------------------------------------

encode ‚à∑ ‚àÄ Œµ Œº .
       (MonadIO Œº,
        AsUsageError Œµ, AsIOError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
        AsProcExitError Œµ,
        MonadError Œµ Œº, Printable Œµ,
        MonadLog (Log MockIOClass) Œº) ‚áí
       AbsDir ‚Üí File ‚Üí DoMock ‚Üí Œº Word8
encode d f do_mock = do
  let req = encodeRequest f 1 ùïπ (pure 1) []
  args ‚Üê encodeArgs req
  let cmd  = (mkMLCmdW' Paths.handbrakeCLI args do_mock) & cwd ‚ä© d
  (_,()) ‚Üê devnull ‚â´ \null ‚Üí null ! cmd
  return 0

----------------------------------------

myMain ‚à∑ ‚àÄ Œµ .
         (HasCallStack, Printable Œµ, AsUsageError Œµ,
          AsIOError Œµ, AsProcExitError Œµ, AsCreateProcError Œµ, AsFPathError Œµ) ‚áí
         DryRunLevel One ‚Üí Options
       ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) Word8
myMain dry_run opts = do
  let do_mock = if 0 ‚â¢ count dry_run then DoMock else NoMock
  case opts of
    Scan f n ‚Üí scan f n do_mock
    Encode f ‚Üí getCwd ‚â´ \ d ‚Üí encode d f do_mock

----------------------------------------

main ‚à∑ IO ()
main = let progDesc = "HandBrakeCLI wrapper"
        in stdMain'' progDesc parseOptions (myMain @UsageFPProcIOError)

-- that's all, folks! ----------------------------------------------------------
