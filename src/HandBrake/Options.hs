module HandBrake.Options
  ( HasOptions, Options( Encode, Scan )
  , details, input, outputDir, overwrite, parseOptions, titles )
where

-- base --------------------------------

import Control.Applicative   ( many, optional )
import Data.List.NonEmpty    ( NonEmpty( (:|) ) )
import Data.Function         ( ($), id )
import System.IO             ( FilePath )
import Text.Show             ( Show )

-- base-unicode-symbols ----------------

import Data.Function.Unicode  ( (‚àò) )
import Data.Monoid.Unicode    ( (‚äï) )

-- fpath -------------------------------

import FPath.AbsDir      ( AbsDir )
import FPath.AsFilePath  ( filepath )
import FPath.File        ( File )
import FPath.Parseable   ( Parseable( readM ) )

-- lens --------------------------------

import Control.Lens.Lens  ( Lens', lens )

-- more-unicode ------------------------

import Data.MoreUnicode.Applicative  ( (‚äµ) )
import Data.MoreUnicode.Functor      ( (‚ä≥) )
import Data.MoreUnicode.Lens         ( (‚´•) )
import Data.MoreUnicode.Maybe        ( ùïÑ )
import Data.MoreUnicode.Monoid       ( —é )
import Data.MoreUnicode.Text         ( ùïã )

-- natural -----------------------------

import Natural  ( ‚Ñï )

-- optparse-applicative ----------------

import Options.Applicative.Builder  ( argument, auto, command, flag, help, info
                                    , metavar, long, progDesc, short
                                    , strOption, value )
import Options.Applicative.Extra    ( hsubparser )
import Options.Applicative.Types    ( Parser, ParserInfo )

-- stdmain -----------------------------

import StdMain  ( Overwrite( NoOverwrite, Overwrite ) )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import HandBrake.Encode  ( EncodeDetails, parseEncodeDetails, readNT )

--------------------------------------------------------------------------------

data Options = Scan File (ùïÑ ‚Ñï)
             | Encode { _input     ‚à∑ File
                      , _titles    ‚à∑ NonEmpty (‚Ñï,ùïã)
                      , _details   ‚à∑ EncodeDetails
                      , _outputDir ‚à∑ FilePath
                      , _overwrite ‚à∑ Overwrite
                      }
  deriving Show

--------------------

class HasOptions Œ± where
  _Options  ‚à∑ Lens' Œ± Options
  input     ‚à∑ Lens' Œ± File
  input     = _Options ‚àò input
  titles    ‚à∑ Lens' Œ± (NonEmpty (‚Ñï,ùïã))
  titles    = _Options ‚àò titles
  details   ‚à∑ Lens' Œ± EncodeDetails
  details   = _Options ‚àò details
  outputDir ‚à∑ Lens' Œ± FilePath
  outputDir = _Options ‚àò outputDir
  overwrite ‚à∑ Lens' Œ± Overwrite
  overwrite = _Options ‚àò overwrite

--------------------

instance HasOptions Options where
  _Options = id
  input     = lens _input     (\ op i ‚Üí op { _input     = i })
  titles    = lens _titles    (\ op t ‚Üí op { _titles    = t })
  details   = lens _details   (\ op d ‚Üí op { _details   = d })
  outputDir = lens _outputDir (\ op d ‚Üí op { _outputDir = d })
  overwrite = lens _overwrite (\ op o ‚Üí op { _overwrite = o })

----------------------------------------

parseScanArgs ‚à∑ Parser Options
parseScanArgs = Scan ‚ä≥ argument readM (metavar "VIDEO")
                     ‚äµ optional (argument auto $ metavar "TITLE#")

--------------------

parseScan ‚à∑ ParserInfo Options
parseScan = info parseScanArgs (progDesc "scan a video file")

----------------------------------------

parseEncode ‚à∑ AbsDir ‚Üí ParserInfo Options
parseEncode d =
  let
    parseEncodeArgs ‚à∑ Parser Options
    parseEncodeArgs =
      let
        parseNT ‚à∑ Parser (‚Ñï,ùïã)
        parseNT = argument readNT (metavar "#=NAME")

        parseNE ‚à∑ Parser Œ± ‚Üí Parser (NonEmpty Œ±)
        parseNE p = (:|) ‚ä≥ p ‚äµ many p
      in
        Encode ‚ä≥ argument readM (metavar "HOSTS.dhall")
               ‚äµ parseNE parseNT
               ‚äµ parseEncodeDetails
               ‚äµ (strOption (—é [ short 'd', long "output-dir"
                                  , help "output dir", value $ d ‚´• filepath]))
               ‚äµ flag NoOverwrite Overwrite (—é [ short 'O', long "overwrite"
                                               , help "overwrite extant files"])
   in
    info parseEncodeArgs (progDesc "encode a video stream")

----------------------------------------

parseOptions ‚à∑ AbsDir ‚Üí Parser Options
parseOptions d =
  hsubparser (command "scan" parseScan ‚äï command "encode" (parseEncode d))

-- that's all, folks! ----------------------------------------------------------
