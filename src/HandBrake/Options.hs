module HandBrake.Options
  ( Options( Encode, Scan ), parseOptions )
where

-- base --------------------------------

import Control.Applicative   ( many, optional, some )
import Data.List.NonEmpty    ( NonEmpty( (:|) ) )
import Data.Function         ( ($) )
import Text.Read             ( read )
import Text.Show             ( Show )

-- base-unicode-symbols ----------------

import Data.Monoid.Unicode  ( (‚äï) )

-- fpath -------------------------------

import FPath.File       ( File )
import FPath.Parseable  ( Parseable( readM ) )

-- more-unicode ------------------------

import Data.MoreUnicode.Applicative  ( (‚äµ), (‚ã™) )
import Data.MoreUnicode.Functor      ( (‚ä≥) )
import Data.MoreUnicode.Maybe        ( ùïÑ )
import Data.MoreUnicode.Text         ( ùïã )

-- natural -----------------------------

import Natural  ( ‚Ñï )

-- optparse-applicative ----------------

import Options.Applicative.Builder  ( argument, auto, command, info, metavar
                                    , progDesc )
import Options.Applicative.Extra    ( hsubparser )
import Options.Applicative.Types    ( Parser, ParserInfo )

-- optparse-plus -----------------------

import OptParsePlus  ( parsecReader )

-- parsec-plus -------------------------

import ParsecPlus  ( Parsecable( parser ) )

-- parsers -----------------------------

import Text.Parser.Char  ( char, digit, noneOf )

-- text --------------------------------

import Data.Text  ( pack )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import HandBrake.Encode  ( EncodeDetails, parseEncodeDetails )

--------------------------------------------------------------------------------

data Options = Scan File (ùïÑ ‚Ñï)
             | Encode { _input ‚à∑ File
                      , titles ‚à∑ NonEmpty (‚Ñï,ùïã)
                      , details ‚à∑ EncodeDetails
                      }
  deriving Show

----------------------------------------

parseScanArgs ‚à∑ Parser Options
parseScanArgs = Scan ‚ä≥ argument readM (metavar "VIDEO")
                     ‚äµ optional (argument auto $ metavar "TITLE#")

--------------------

parseScan ‚à∑ ParserInfo Options
parseScan = info parseScanArgs (progDesc "scan a video file")

----------------------------------------

newtype NumberedTitle = NumberedTitle { unNumberedTitle ‚à∑ (‚Ñï,ùïã) }

----------

instance Parsecable NumberedTitle where
  parser = NumberedTitle ‚ä≥ go
    where go = (,) ‚ä≥ (read ‚ä≥ (some digit)) ‚ã™ char '=' ‚äµ pack ‚ä≥ some (noneOf [])

--------------------

parseEncode ‚à∑ ParserInfo Options
parseEncode =
  let
    parseEncodeArgs ‚à∑ Parser Options
    parseEncodeArgs =
      let
        parseNT ‚à∑ Parser (‚Ñï,ùïã)
        parseNT = argument (unNumberedTitle ‚ä≥ parsecReader) (metavar "#=NAME")

        parseNE ‚à∑ Parser Œ± ‚Üí Parser (NonEmpty Œ±)
        parseNE p = (:|) ‚ä≥ p ‚äµ many p
      in
        Encode ‚ä≥ argument readM (metavar "HOSTS.dhall")
               ‚äµ parseNE parseNT
               ‚äµ parseEncodeDetails
   in
    info parseEncodeArgs (progDesc "encode a video stream")

----------------------------------------

parseOptions ‚à∑ Parser Options
parseOptions =
  hsubparser ( command "scan"   parseScan ‚äï command "encode" parseEncode)

-- that's all, folks! ----------------------------------------------------------
